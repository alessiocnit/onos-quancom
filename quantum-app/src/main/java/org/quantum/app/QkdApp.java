package org.quantum.app;


import org.onlab.packet.Ip4Address;
import org.onlab.util.ItemNotFoundException;
import org.onosproject.net.ConnectPoint;
import org.onosproject.net.Device;
import org.onosproject.net.DeviceId;
import org.onosproject.net.device.DeviceService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import static org.onosproject.cli.AbstractShellCommand.get;

public class QkdApp {
    private final Logger log = LoggerFactory.getLogger(getClass());

    QkdAppManager appManager = get(QkdAppManager.class);

    QkdNodeManager nodeManager = get(QkdNodeManager.class);

    DeviceService deviceService = get(DeviceService.class);

    //These parameters are loaded from REST
    protected String appAddress;
    protected String appPort;
    protected String kmAddress;
    protected String kmPort;
    protected String kmId;

    //TODO consolidate device and qkdnode
    protected Device device;
    protected QkdNode qkdNode;

    //These parameters are generated by the SDN controller
    protected String saeId;


    //These parameters are optional and loaded from REST
    protected Ip4Address partnerAppAddress;
    protected int partnerAppPort;
    protected String partnerAppQos;

    private static int registeredApps = 0;

    public QkdApp(String appA, String appP, String kmA, String kmP) {
        registeredApps++;

        if (appManager.getQkdApp(appA, appP) != null) {
            throw new ItemNotFoundException("Application is already registered");
        }

        //Retrieve the Qkd node location from the km IP
        DeviceId deviceId = null;
        for (Device device : deviceService.getDevices()) {
            String deviceIp = device.id().toString().split(":")[1];

            if (deviceIp.equals(kmA)) {
                deviceId = device.id();
            }
        }

        //Check if device exists
        if (deviceId != null) {
            device = deviceService.getDevice(deviceId);
        } else {
            throw new ItemNotFoundException("Specified device is unknown");
        }

        qkdNode = nodeManager.getQkdNode(deviceId.toString());
        if (qkdNode == null) {
            throw new ItemNotFoundException("Specified device is not a QKD node");
        }

        if (!kmP.equals(qkdNode.kmPort)) {
            throw new ItemNotFoundException("Specified key manager is listening on a different port");
        }

        appAddress = appA;
        appPort = appP;
        kmAddress = kmA;
        kmPort = kmP;
        kmId = qkdNode.kmId;

        saeId = "cccccccc-cccc-cccc-" + String.format("%04d", registeredApps) + "-cccccccccccc";

        //Add the app to the local database
        appManager.addQkdApp(saeId, this);

        log.info("A new app registered at device {} with sae_id {}", deviceId, saeId);
    }
}
