package org.quantum.app;


import org.onlab.packet.Ip4Address;
import org.onlab.util.ItemNotFoundException;
import org.onosproject.net.ConnectPoint;
import org.onosproject.net.Device;
import org.onosproject.net.DeviceId;
import org.onosproject.net.device.DeviceService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import static org.onosproject.cli.AbstractShellCommand.get;

public class QkdApp {
    private final Logger log = LoggerFactory.getLogger(getClass());

    QkdAppManager manager = get(QkdAppManager.class);

    DeviceService deviceService = get(DeviceService.class);

    //These parameters are loaded from REST
    protected String appAddress;
    protected String appPort;
    protected String kmAddress;
    protected String kmPort;

    //These parameters are generated by the SDN controller
    protected String saeId;
    protected int intSaeId;
    protected Device device;
    protected ConnectPoint connectPoint;

    //These parameters are optional and loaded from REST
    protected Ip4Address partnerAppAddress;
    protected int partnerAppPort;
    protected String partnerAppQos;

    private static int registeredApps = 0;

    public QkdApp(String appA, String appP, String kmA, String kmP) {
        registeredApps++;

        appAddress = appA;
        appPort = appP;
        kmAddress = kmA;
        kmPort = kmP;

        if (manager.getQkdApp(appAddress, appPort) != null) {
            throw new ItemNotFoundException("Application is already registered");
        }

        //TODO - Gestire correttamente la porta del key manager cercando la device solo con IP
        String remappedKm = kmP;
        if (kmP.equals("8001")) {
            remappedKm = "11001";
        }
        if (kmP.equals("8002")) {
            remappedKm = "11002";
        }

        DeviceId deviceId = DeviceId.deviceId("netconf:" + kmAddress.toString() + ":" + remappedKm);

        if (deviceService.getDevice(deviceId) != null) {
            device = deviceService.getDevice(deviceId);
            connectPoint = ConnectPoint.fromString(deviceId + "/2");
        } else {
            throw new ItemNotFoundException("Specified key manager is unknown");
        }

        saeId = "cccccccc-cccc-cccc-" + String.format("%04d", registeredApps) + "-cccccccccccc";

        //Add the app to the local database
        manager.addQkdApp(saeId, this);

        log.info("A new app registered at device {} with sae_id {}", deviceId, saeId);
    }
}
